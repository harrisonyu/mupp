
/#########################################
/#           YOUTUBE                     #
/#########################################
/
  You are free to copy and use this sample in accordance with the terms of the
  Apache license (http://www.apache.org/licenses/LICENSE-2.0.html)
!!! Strict
%html{:xmlns => "http://www.w3.org/1999/xhtml"}
  %head
    %meta{:content => "text/html; charset=utf-8", "http-equiv" => "content-type"}/
    %title YouTube Player API Sample
    :css
      #videoDiv { 
      margin-right: 3px;
      }
      #videoInfo {
      margin-left: 3px;
      }
    / control bar
    %link{:href => "http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css", :rel => "stylesheet"}/
    %script{:src => "http://code.jquery.com/jquery-1.9.1.js"}
    %script{:src => "http://code.jquery.com/ui/1.10.3/jquery-ui.js"}
    %link{:href => "/resources/demos/style.css", :rel => "stylesheet"}/
    
    :css
      #toolbar {
        padding: 4px;
        display: inline-block;
      }
      /* support: IE7 */
      *+html #toolbar {
        display: inline;
      }
          :javascript
      $(function() {
        $( "#beginning" ).button({
          text: false,
          icons: {
            primary: "ui-icon-seek-start"
          }
        });
        $( "#rewind" ).button({
          text: false,
          icons: {
            primary: "ui-icon-seek-prev"
          }
        });
        $( "#play" ).button({
          text: false,
          icons: {
            primary: "ui-icon-play"
          }
        })
        .click(function() {
          var options;
          if ( $( this ).text() === "play" ) {
            options = {
              label: "pause",
              icons: {
                primary: "ui-icon-pause"
              }
            };
          } else {
            options = {
              label: "play",
              icons: {
                primary: "ui-icon-play"
              }
            };
          }
          $( this ).button( "option", options );
        });
        $( "#stop" ).button({
          text: false,
          icons: {
            primary: "ui-icon-stop"
          }
        })
        .click(function() {
          $( "#play" ).button( "option", {
            label: "play",
            icons: {
              primary: "ui-icon-play"
            }
          });
        });
        $( "#forward" ).button({
          text: false,
          icons: {
            primary: "ui-icon-seek-next"
          }
        });
        $( "#end" ).button({
          text: false,
          icons: {
            primary: "ui-icon-seek-end"
          }
        });
        $( "#shuffle" ).button();
        $( "#repeat" ).buttonset();
      });
    / end control bar

    / progress bar
    %link{:href => "http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css", :rel => "stylesheet"}/
    %script{:src => "http://code.jquery.com/jquery-1.9.1.js"}
    %script{:src => "http://code.jquery.com/ui/1.10.3/jquery-ui.js"}
    %link{:href => "/resources/demos/style.css", :rel => "stylesheet"}/
    
    / end progress bar

    / chrome player script
    %script{:src => "//www.google.com/jsapi", :type => "text/javascript"}
    :javascript
      google.load("swfobject", "2.1");
    :javascript
      /*
       * Chromeless player has no controls.
       */

      // update the progress bar
      function updateProgressBar(progress)
      {
        $(function() {
        $( "#progressbar" ).progressbar({
          value: progress
        });
      });
      }
      

      // Update a particular HTML element with a new value
      function updateHTML(elmId, value) {
        document.getElementById(elmId).innerHTML = value;
      }
      
      // This function is called when an error is thrown by the player
      function onPlayerError(errorCode) {
        alert("An error occured of type:" + errorCode);
      }
      
      // This function is called when the player changes state
      function onPlayerStateChange(newState) {
        updateHTML("playerState", newState);
      }
      
      // Display information about the current state of the player
      function updatePlayerInfo() {
        // Also check that at least one function exists since when IE unloads the
        // page, it will destroy the SWF before clearing the interval.
        if(ytplayer && ytplayer.getDuration) {
          updateHTML("videoDuration", ytplayer.getDuration());
          updateHTML("videoCurrentTime", ytplayer.getCurrentTime());
          updateHTML("bytesTotal", ytplayer.getVideoBytesTotal());
          updateHTML("startBytes", ytplayer.getVideoStartBytes());
          updateHTML("bytesLoaded", ytplayer.getVideoBytesLoaded());
          updateHTML("volume", ytplayer.getVolume());
          if(ytplayer.getCurrentTime() > 0)
          {
             updateProgressBar((ytplayer.getCurrentTime() / ytplayer.getDuration()) * 100);
          }
        }
      }
      
      // Allow the user to set the volume from 0-100
      function setVideoVolume() {
        var volume = parseInt(document.getElementById("volumeSetting").value);
        if(isNaN(volume) || volume < 0 || volume > 100) {
          alert("Please enter a valid volume between 0 and 100.");
        }
        else if(ytplayer){
          ytplayer.setVolume(volume);
        }
      }
      
      function playVideo() {
        if (ytplayer) {
          ytplayer.playVideo();
        }
      }
      
      function pauseVideo() {
        if (ytplayer) {
          ytplayer.pauseVideo();
        }
      }
      
      function muteVideo() {
        if(ytplayer) {
          ytplayer.mute();
        }
      }
      
      function unMuteVideo() {
        if(ytplayer) {
          ytplayer.unMute();
        }
      }
      
      
      // This function is automatically called by the player once it loads
      function onYouTubePlayerReady(playerId) {
        ytplayer = document.getElementById("ytPlayer");
        // This causes the updatePlayerInfo function to be called every 250ms to
        // get fresh data from the player
        setInterval(updatePlayerInfo, 250);
        updatePlayerInfo();
        ytplayer.addEventListener("onStateChange", "onPlayerStateChange");
        ytplayer.addEventListener("onError", "onPlayerError");
        //Load an initial video into the player
        ytplayer.cueVideoById("vqaCBDy39KU");
      }
      
      // The "main method" of this sample. Called when someone clicks "Run".
      function loadPlayer() {
        // Lets Flash from another domain call JavaScript
        var params = { allowScriptAccess: "always" };
        // The element id of the Flash embed
        var atts = { id: "ytPlayer" };
        // All of the magic handled by SWFObject (http://code.google.com/p/swfobject/)
        swfobject.embedSWF("http://www.youtube.com/apiplayer?" +
         "version=3&enablejsapi=1&playerapiid=player1", 
         "videoDiv", "1", "1", "9", null, null, params, atts);
      }
      function _run() {
        loadPlayer();
        updateProgressBar(0);
      }
      google.setOnLoadCallback(_run);
    /end chrome player script
  %body{:style => "font-family: Arial;border: 0 none;"}

    #progressbar

    / control bar stuff
    #toolbar.ui-widget-header.ui-corner-all
      %button#beginning go to beginning
      %button#rewind rewind
      %button#play{:href => "javascript:void(0);", :onclick => "playVideo();"} play
      %button#stop{:href => "javascript:void(0);", :onclick => "pauseVideo();"} pause
      %button#forward fast forward
      //%button#end go to end
      %input#shuffle{:type => "checkbox"}/
      %label{:for => "shuffle"} Shuffle
      %span#repeat
        %input#repeat0{:checked => "checked", :name => "repeat", :type => "radio"}/
        %label{:for => "repeat0"} No Repeat
        %input#repeat1{:name => "repeat", :type => "radio"}/
        %label{:for => "repeat1"} Once
        %input#repeatall{:name => "repeat", :type => "radio"}/
        %label{:for => "repeatall"} All
    / end control bar

    %table
      %tr
        %td
          #videoDiv Loading...
        %td{:valign => "top"}
          #videoInfo
            %p
              Player state:
              %span#playerState --
            %p
              Current Time:
              %span#videoCurrentTime --:--
              | Duration:
              %span#videoDuration --:--
            %p
              Bytes Total:
              %span#bytesTotal --
              | Start Bytes:
              %span#startBytes --
              | Bytes Loaded:
              %span#bytesLoaded --
            %p
              Controls:
              %a{:href => "javascript:void(0);", :onclick => "playVideo();"} Play
              |
              %a{:href => "javascript:void(0);", :onclick => "pauseVideo();"} Pause
              |
              %a{:href => "javascript:void(0);", :onclick => "muteVideo();"} Mute
              |
              %a{:href => "javascript:void(0);", :onclick => "unMuteVideo();"} Unmute
            %p
              %input#volumeSetting{:size => "3", :type => "text"}>/
              \ 
              %a{:href => "javascript:void(0)", :onclick => "setVideoVolume();"} <- Set Volume
              | Volume:
              %span#volume --
​

/#########################################
/#           ACCORDIAN                   #
/#########################################

<!doctype html>
%html{:lang => "en"}
  %head
    %meta{:charset => "utf-8"}/
    %title jQuery UI Accordion - No auto height
    %link{:href => "http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css", :rel => "stylesheet"}/
    %script{:src => "http://code.jquery.com/jquery-1.9.1.js"}
    %script{:src => "http://code.jquery.com/ui/1.10.3/jquery-ui.js"}
    %link{:href => "/resources/demos/style.css", :rel => "stylesheet"}/
    :javascript
      $(function() {
      $( "#accordion" ).accordion({
      heightStyle: "content"
      });
      });
  %body
    #accordion
      %h3 Lyrics
      %div
        %p sample lyrics here test                                                                                          testmore lyrics              test
      %h3 Artist Bio
      %div
        %p wikipedia?????
      %h3 Section 3
      %div
        %p   more stuff
        %ul
          %li List item
          %li List item
          %li List item
          %li List item
          %li List item
          %li List item
          %li List item